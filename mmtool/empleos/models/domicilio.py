# coding: utf-8

"""
    Matchmaking tool

    Documentacion de llamadas para la generacion del api del matchmaking tool del proyecto jalisco sin hambre.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class Domicilio(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'calle': 'str',
        'no_exterior': 'str',
        'no_interior': 'str',
        'colonia': 'str',
        'localidad': 'str',
        'municipio': 'str',
        'estado': 'str',
        'codigopostal': 'str'
    }

    attribute_map = {
        'id': 'id',
        'calle': 'calle',
        'no_exterior': 'noExterior',
        'no_interior': 'noInterior',
        'colonia': 'colonia',
        'localidad': 'localidad',
        'municipio': 'municipio',
        'estado': 'estado',
        'codigopostal': 'codigopostal'
    }

    def __init__(self, id=None, calle=None, no_exterior=None, no_interior=None, colonia=None, localidad=None, municipio=None, estado=None, codigopostal=None):  # noqa: E501
        """Domicilio - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._calle = None
        self._no_exterior = None
        self._no_interior = None
        self._colonia = None
        self._localidad = None
        self._municipio = None
        self._estado = None
        self._codigopostal = None
        self.discriminator = None

        self.id = id
        if calle is not None:
            self.calle = calle
        if no_exterior is not None:
            self.no_exterior = no_exterior
        if no_interior is not None:
            self.no_interior = no_interior
        if colonia is not None:
            self.colonia = colonia
        if localidad is not None:
            self.localidad = localidad
        if municipio is not None:
            self.municipio = municipio
        if estado is not None:
            self.estado = estado
        if codigopostal is not None:
            self.codigopostal = codigopostal

    @property
    def id(self):
        """Gets the id of this Domicilio.  # noqa: E501


        :return: The id of this Domicilio.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Domicilio.


        :param id: The id of this Domicilio.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def calle(self):
        """Gets the calle of this Domicilio.  # noqa: E501

        Calle del domicilio  # noqa: E501

        :return: The calle of this Domicilio.  # noqa: E501
        :rtype: str
        """
        return self._calle

    @calle.setter
    def calle(self, calle):
        """Sets the calle of this Domicilio.

        Calle del domicilio  # noqa: E501

        :param calle: The calle of this Domicilio.  # noqa: E501
        :type: str
        """

        self._calle = calle

    @property
    def no_exterior(self):
        """Gets the no_exterior of this Domicilio.  # noqa: E501

        Número exterior del domicilio  # noqa: E501

        :return: The no_exterior of this Domicilio.  # noqa: E501
        :rtype: str
        """
        return self._no_exterior

    @no_exterior.setter
    def no_exterior(self, no_exterior):
        """Sets the no_exterior of this Domicilio.

        Número exterior del domicilio  # noqa: E501

        :param no_exterior: The no_exterior of this Domicilio.  # noqa: E501
        :type: str
        """

        self._no_exterior = no_exterior

    @property
    def no_interior(self):
        """Gets the no_interior of this Domicilio.  # noqa: E501

        Número interior del domicilio  # noqa: E501

        :return: The no_interior of this Domicilio.  # noqa: E501
        :rtype: str
        """
        return self._no_interior

    @no_interior.setter
    def no_interior(self, no_interior):
        """Sets the no_interior of this Domicilio.

        Número interior del domicilio  # noqa: E501

        :param no_interior: The no_interior of this Domicilio.  # noqa: E501
        :type: str
        """

        self._no_interior = no_interior

    @property
    def colonia(self):
        """Gets the colonia of this Domicilio.  # noqa: E501

        Colonia del domicilio  # noqa: E501

        :return: The colonia of this Domicilio.  # noqa: E501
        :rtype: str
        """
        return self._colonia

    @colonia.setter
    def colonia(self, colonia):
        """Sets the colonia of this Domicilio.

        Colonia del domicilio  # noqa: E501

        :param colonia: The colonia of this Domicilio.  # noqa: E501
        :type: str
        """

        self._colonia = colonia

    @property
    def localidad(self):
        """Gets the localidad of this Domicilio.  # noqa: E501

        Localidad donde se encuentra el domicilio  # noqa: E501

        :return: The localidad of this Domicilio.  # noqa: E501
        :rtype: str
        """
        return self._localidad

    @localidad.setter
    def localidad(self, localidad):
        """Sets the localidad of this Domicilio.

        Localidad donde se encuentra el domicilio  # noqa: E501

        :param localidad: The localidad of this Domicilio.  # noqa: E501
        :type: str
        """

        self._localidad = localidad

    @property
    def municipio(self):
        """Gets the municipio of this Domicilio.  # noqa: E501

        Municipio del domicilio  # noqa: E501

        :return: The municipio of this Domicilio.  # noqa: E501
        :rtype: str
        """
        return self._municipio

    @municipio.setter
    def municipio(self, municipio):
        """Sets the municipio of this Domicilio.

        Municipio del domicilio  # noqa: E501

        :param municipio: The municipio of this Domicilio.  # noqa: E501
        :type: str
        """

        self._municipio = municipio

    @property
    def estado(self):
        """Gets the estado of this Domicilio.  # noqa: E501

        Estado del domicilio  # noqa: E501

        :return: The estado of this Domicilio.  # noqa: E501
        :rtype: str
        """
        return self._estado

    @estado.setter
    def estado(self, estado):
        """Sets the estado of this Domicilio.

        Estado del domicilio  # noqa: E501

        :param estado: The estado of this Domicilio.  # noqa: E501
        :type: str
        """

        self._estado = estado

    @property
    def codigopostal(self):
        """Gets the codigopostal of this Domicilio.  # noqa: E501

        Código postal del domicilio  # noqa: E501

        :return: The codigopostal of this Domicilio.  # noqa: E501
        :rtype: str
        """
        return self._codigopostal

    @codigopostal.setter
    def codigopostal(self, codigopostal):
        """Sets the codigopostal of this Domicilio.

        Código postal del domicilio  # noqa: E501

        :param codigopostal: The codigopostal of this Domicilio.  # noqa: E501
        :type: str
        """

        self._codigopostal = codigopostal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Domicilio):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
