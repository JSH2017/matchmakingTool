# coding: utf-8

"""
    Matchmaking tool

    Documentacion de llamadas para la generacion del api del matchmaking tool del proyecto jalisco sin hambre.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from empleos.models.categoria import Categoria  # noqa: F401,E501


class Empleo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'categorias': 'list[Categoria]',
        'puesto': 'str',
        'plazas': 'str',
        'sexo': 'str',
        'edad': 'str',
        'descripcion': 'str',
        'requisitos': 'str',
        'escolaridad': 'str',
        'experiencia': 'str',
        'sueldomensual': 'str',
        'fechapublicacion': 'datetime',
        'fechaexpiracion': 'datetime',
        'status': 'str',
        'horarios': 'str',
        'observaciones': 'str'
    }

    attribute_map = {
        'id': 'id',
        'categorias': 'categorias',
        'puesto': 'puesto',
        'plazas': 'plazas',
        'sexo': 'sexo',
        'edad': 'edad',
        'descripcion': 'descripcion',
        'requisitos': 'requisitos',
        'escolaridad': 'escolaridad',
        'experiencia': 'experiencia',
        'sueldomensual': 'sueldomensual',
        'fechapublicacion': 'fechapublicacion',
        'fechaexpiracion': 'fechaexpiracion',
        'status': 'status',
        'horarios': 'horarios',
        'observaciones': 'observaciones'
    }

    def __init__(self, id=None, categorias=None, puesto=None, plazas=None, sexo=None, edad=None, descripcion=None, requisitos=None, escolaridad=None, experiencia=None, sueldomensual=None, fechapublicacion=None, fechaexpiracion=None, status=None, horarios=None, observaciones=None):  # noqa: E501
        """Empleo - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._categorias = None
        self._puesto = None
        self._plazas = None
        self._sexo = None
        self._edad = None
        self._descripcion = None
        self._requisitos = None
        self._escolaridad = None
        self._experiencia = None
        self._sueldomensual = None
        self._fechapublicacion = None
        self._fechaexpiracion = None
        self._status = None
        self._horarios = None
        self._observaciones = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if categorias is not None:
            self.categorias = categorias
        if puesto is not None:
            self.puesto = puesto
        if plazas is not None:
            self.plazas = plazas
        if sexo is not None:
            self.sexo = sexo
        if edad is not None:
            self.edad = edad
        if descripcion is not None:
            self.descripcion = descripcion
        if requisitos is not None:
            self.requisitos = requisitos
        if escolaridad is not None:
            self.escolaridad = escolaridad
        if experiencia is not None:
            self.experiencia = experiencia
        if sueldomensual is not None:
            self.sueldomensual = sueldomensual
        if fechapublicacion is not None:
            self.fechapublicacion = fechapublicacion
        if fechaexpiracion is not None:
            self.fechaexpiracion = fechaexpiracion
        if status is not None:
            self.status = status
        if horarios is not None:
            self.horarios = horarios
        if observaciones is not None:
            self.observaciones = observaciones

    @property
    def id(self):
        """Gets the id of this Empleo.  # noqa: E501


        :return: The id of this Empleo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Empleo.


        :param id: The id of this Empleo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def categorias(self):
        """Gets the categorias of this Empleo.  # noqa: E501


        :return: The categorias of this Empleo.  # noqa: E501
        :rtype: list[Categoria]
        """
        return self._categorias

    @categorias.setter
    def categorias(self, categorias):
        """Sets the categorias of this Empleo.


        :param categorias: The categorias of this Empleo.  # noqa: E501
        :type: list[Categoria]
        """

        self._categorias = categorias

    @property
    def puesto(self):
        """Gets the puesto of this Empleo.  # noqa: E501


        :return: The puesto of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._puesto

    @puesto.setter
    def puesto(self, puesto):
        """Sets the puesto of this Empleo.


        :param puesto: The puesto of this Empleo.  # noqa: E501
        :type: str
        """

        self._puesto = puesto

    @property
    def plazas(self):
        """Gets the plazas of this Empleo.  # noqa: E501


        :return: The plazas of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._plazas

    @plazas.setter
    def plazas(self, plazas):
        """Sets the plazas of this Empleo.


        :param plazas: The plazas of this Empleo.  # noqa: E501
        :type: str
        """

        self._plazas = plazas

    @property
    def sexo(self):
        """Gets the sexo of this Empleo.  # noqa: E501


        :return: The sexo of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._sexo

    @sexo.setter
    def sexo(self, sexo):
        """Sets the sexo of this Empleo.


        :param sexo: The sexo of this Empleo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Masculino", "Femenino", "Indistinto"]  # noqa: E501
        if sexo not in allowed_values:
            raise ValueError(
                "Invalid value for `sexo` ({0}), must be one of {1}"  # noqa: E501
                .format(sexo, allowed_values)
            )

        self._sexo = sexo

    @property
    def edad(self):
        """Gets the edad of this Empleo.  # noqa: E501


        :return: The edad of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._edad

    @edad.setter
    def edad(self, edad):
        """Sets the edad of this Empleo.


        :param edad: The edad of this Empleo.  # noqa: E501
        :type: str
        """

        self._edad = edad

    @property
    def descripcion(self):
        """Gets the descripcion of this Empleo.  # noqa: E501


        :return: The descripcion of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._descripcion

    @descripcion.setter
    def descripcion(self, descripcion):
        """Sets the descripcion of this Empleo.


        :param descripcion: The descripcion of this Empleo.  # noqa: E501
        :type: str
        """

        self._descripcion = descripcion

    @property
    def requisitos(self):
        """Gets the requisitos of this Empleo.  # noqa: E501


        :return: The requisitos of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._requisitos

    @requisitos.setter
    def requisitos(self, requisitos):
        """Sets the requisitos of this Empleo.


        :param requisitos: The requisitos of this Empleo.  # noqa: E501
        :type: str
        """

        self._requisitos = requisitos

    @property
    def escolaridad(self):
        """Gets the escolaridad of this Empleo.  # noqa: E501


        :return: The escolaridad of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._escolaridad

    @escolaridad.setter
    def escolaridad(self, escolaridad):
        """Sets the escolaridad of this Empleo.


        :param escolaridad: The escolaridad of this Empleo.  # noqa: E501
        :type: str
        """

        self._escolaridad = escolaridad

    @property
    def experiencia(self):
        """Gets the experiencia of this Empleo.  # noqa: E501


        :return: The experiencia of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._experiencia

    @experiencia.setter
    def experiencia(self, experiencia):
        """Sets the experiencia of this Empleo.


        :param experiencia: The experiencia of this Empleo.  # noqa: E501
        :type: str
        """

        self._experiencia = experiencia

    @property
    def sueldomensual(self):
        """Gets the sueldomensual of this Empleo.  # noqa: E501


        :return: The sueldomensual of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._sueldomensual

    @sueldomensual.setter
    def sueldomensual(self, sueldomensual):
        """Sets the sueldomensual of this Empleo.


        :param sueldomensual: The sueldomensual of this Empleo.  # noqa: E501
        :type: str
        """

        self._sueldomensual = sueldomensual

    @property
    def fechapublicacion(self):
        """Gets the fechapublicacion of this Empleo.  # noqa: E501


        :return: The fechapublicacion of this Empleo.  # noqa: E501
        :rtype: datetime
        """
        return self._fechapublicacion

    @fechapublicacion.setter
    def fechapublicacion(self, fechapublicacion):
        """Sets the fechapublicacion of this Empleo.


        :param fechapublicacion: The fechapublicacion of this Empleo.  # noqa: E501
        :type: datetime
        """

        self._fechapublicacion = fechapublicacion

    @property
    def fechaexpiracion(self):
        """Gets the fechaexpiracion of this Empleo.  # noqa: E501


        :return: The fechaexpiracion of this Empleo.  # noqa: E501
        :rtype: datetime
        """
        return self._fechaexpiracion

    @fechaexpiracion.setter
    def fechaexpiracion(self, fechaexpiracion):
        """Sets the fechaexpiracion of this Empleo.


        :param fechaexpiracion: The fechaexpiracion of this Empleo.  # noqa: E501
        :type: datetime
        """

        self._fechaexpiracion = fechaexpiracion

    @property
    def status(self):
        """Gets the status of this Empleo.  # noqa: E501

        Estatus del empleo  # noqa: E501

        :return: The status of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Empleo.

        Estatus del empleo  # noqa: E501

        :param status: The status of this Empleo.  # noqa: E501
        :type: str
        """
        allowed_values = ["vacante", "ocupado"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def horarios(self):
        """Gets the horarios of this Empleo.  # noqa: E501

        tipo de horario u observaciones.  # noqa: E501

        :return: The horarios of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._horarios

    @horarios.setter
    def horarios(self, horarios):
        """Sets the horarios of this Empleo.

        tipo de horario u observaciones.  # noqa: E501

        :param horarios: The horarios of this Empleo.  # noqa: E501
        :type: str
        """

        self._horarios = horarios

    @property
    def observaciones(self):
        """Gets the observaciones of this Empleo.  # noqa: E501

        Observaciones generales  # noqa: E501

        :return: The observaciones of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._observaciones

    @observaciones.setter
    def observaciones(self, observaciones):
        """Sets the observaciones of this Empleo.

        Observaciones generales  # noqa: E501

        :param observaciones: The observaciones of this Empleo.  # noqa: E501
        :type: str
        """

        self._observaciones = observaciones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Empleo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
