# coding: utf-8

"""
    Matchmaking tool

    Documentacion de llamadas para la generacion del api del matchmaking tool del proyecto jalisco sin hambre.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class CentroComunitario(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'nombre': 'str'
    }

    attribute_map = {
        'id': 'id',
        'nombre': 'nombre'
    }

    def __init__(self, id=None, nombre=None):  # noqa: E501
        """CentroComunitario - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._nombre = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if nombre is not None:
            self.nombre = nombre

    @property
    def id(self):
        """Gets the id of this CentroComunitario.  # noqa: E501


        :return: The id of this CentroComunitario.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CentroComunitario.


        :param id: The id of this CentroComunitario.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def nombre(self):
        """Gets the nombre of this CentroComunitario.  # noqa: E501


        :return: The nombre of this CentroComunitario.  # noqa: E501
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre):
        """Sets the nombre of this CentroComunitario.


        :param nombre: The nombre of this CentroComunitario.  # noqa: E501
        :type: str
        """

        self._nombre = nombre

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CentroComunitario):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
