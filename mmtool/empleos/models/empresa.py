from django.db import models

# coding: utf-8

"""
    Matchmaking tool

    Documentacion de llamadas para la generacion del api del matchmaking tool del proyecto jalisco sin hambre.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class Empresa(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nombre': 'str',
        'telefono': 'str',
        'contacto': 'str',
        'correoelectronico': 'str',
        'horarioatencion': 'str'
    }

    attribute_map = {
        'nombre': 'nombre',
        'telefono': 'telefono',
        'contacto': 'contacto',
        'correoelectronico': 'correoelectronico',
        'horarioatencion': 'horarioatencion'
    }

    def __init__(self, nombre=None, telefono=None, contacto=None, correoelectronico=None, horarioatencion=None):  # noqa: E501
        """Empresa - a model defined in Swagger"""  # noqa: E501

        self._nombre = None
        self._telefono = None
        self._contacto = None
        self._correoelectronico = None
        self._horarioatencion = None
        self.discriminator = None

        if nombre is not None:
            self.nombre = nombre
        if telefono is not None:
            self.telefono = telefono
        if contacto is not None:
            self.contacto = contacto
        if correoelectronico is not None:
            self.correoelectronico = correoelectronico
        if horarioatencion is not None:
            self.horarioatencion = horarioatencion

    @property
    def nombre(self):
        """Gets the nombre of this Empresa.  # noqa: E501


        :return: The nombre of this Empresa.  # noqa: E501
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre):
        """Sets the nombre of this Empresa.


        :param nombre: The nombre of this Empresa.  # noqa: E501
        :type: str
        """

        self._nombre = nombre

    @property
    def telefono(self):
        """Gets the telefono of this Empresa.  # noqa: E501


        :return: The telefono of this Empresa.  # noqa: E501
        :rtype: str
        """
        return self._telefono

    @telefono.setter
    def telefono(self, telefono):
        """Sets the telefono of this Empresa.


        :param telefono: The telefono of this Empresa.  # noqa: E501
        :type: str
        """

        self._telefono = telefono

    @property
    def contacto(self):
        """Gets the contacto of this Empresa.  # noqa: E501


        :return: The contacto of this Empresa.  # noqa: E501
        :rtype: str
        """
        return self._contacto

    @contacto.setter
    def contacto(self, contacto):
        """Sets the contacto of this Empresa.


        :param contacto: The contacto of this Empresa.  # noqa: E501
        :type: str
        """

        self._contacto = contacto

    @property
    def correoelectronico(self):
        """Gets the correoelectronico of this Empresa.  # noqa: E501


        :return: The correoelectronico of this Empresa.  # noqa: E501
        :rtype: str
        """
        return self._correoelectronico

    @correoelectronico.setter
    def correoelectronico(self, correoelectronico):
        """Sets the correoelectronico of this Empresa.


        :param correoelectronico: The correoelectronico of this Empresa.  # noqa: E501
        :type: str
        """

        self._correoelectronico = correoelectronico

    @property
    def horarioatencion(self):
        """Gets the horarioatencion of this Empresa.  # noqa: E501


        :return: The horarioatencion of this Empresa.  # noqa: E501
        :rtype: str
        """
        return self._horarioatencion

    @horarioatencion.setter
    def horarioatencion(self, horarioatencion):
        """Sets the horarioatencion of this Empresa.


        :param horarioatencion: The horarioatencion of this Empresa.  # noqa: E501
        :type: str
        """

        self._horarioatencion = horarioatencion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Empresa):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
